"""Models for the game app."""

from uuid import uuid4
from django.db import models
from django.contrib.auth import get_user_model
from datetime import timedelta
from numpy import mean, std

User = get_user_model()  # users

def deserialize_user(user):
    """Deserialize user instance to JSON."""
    return {
        'id': user.id, 'username': user.username, 'email': user.email,
        'first_name': user.first_name, 'last_name': user.last_name}
    # is admin? T/F
    # add user.type

class TrackableDateModel(models.Model):
    """Abstract model to Track the creation/updated date for a model."""
    create_date = models.DateTimeField(auto_now_add=True)
    update_date = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True

def _generate_unique_uri():
    """Generates a unique uri for the game session."""
    return str(uuid4()).replace('-', '')[:15]

class GameSession(TrackableDateModel):
    """ A Game. The uri's are generated by taking the first 15 characters from a UUID """
    # owner = models.ForeignKey(User, on_delete=models.PROTECT)  #owner can be supplier?
    # use as game id, and verification code
    uri = models.URLField(default=_generate_unique_uri, primary_key=True)
    num_suppliers = models.IntegerField()
    num_buyers = models.IntegerField()
    date_created = models.DateTimeField(auto_now_add=True)
    game_state = models.CharField(max_length=1)  # changes to ended when
    current_period = models.IntegerField()

    def __str__(self):
        return(self.uri)

    def __unicode__(self):
        return(str(self))

    def getCompletedGame(self, game_status):
        return(self.games.filter(game_status=1).count())

    def getRunningGame(self, game_status):
        return(self.games.filter(game_status=0))


class GameSessionMessage(TrackableDateModel):
    """Store submissions for a session. """
    user = models.ForeignKey(User, on_delete=models.PROTECT)
    game_session = models.ForeignKey(
        GameSession, related_name='uri', on_delete=models.PROTECT)
    period = models.ForeignKey(
        GameSession, related_name="current_period", on_delete=models.PROTECT)
    forecast1 = models.IntegerField()
    forecast2 = models.IntegerField()
    forecast3 = models.IntegerField()
    forecast4 = models.IntegerField()
    order = models.IntegerField()
    date_created = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return(str(self.user) + 'in period' + str(self.period) + 'in game' + str(self.game_session))

    def __unicode__(self):
        return(str(self))

    def to_json(self):
        """deserialize message to JSON."""
        return{'user': deserialize_user(self.user), 'Forecast 1': self.forecast1, 'Forecast 2': self.forecast2, 'Forecast 3': self.forecast3, 'Forecast 4': self.forecast4, 'Order': self.order}

class GameSessionMember(TrackableDateModel):
    """Store all users in a chat session."""
    user_types = (('S', 'Supplier'), ('B', 'Buyer'), ('GM', 'Game Manager'))
    game_session = models.ForeignKey(
        GameSession, related_name='uri', on_delete=models.PROTECT
    )
    user = models.ForeignKey(User, on_delete=models.PROTECT)
    user_type = models.CharField(max_length=1, choices=user_types)

class GameBuyerData(models.Model):
    game_session = models.ForeignKey(
        GameSession, related_name='uid', on_delete=models.PROTECT
    )
    user = models.ForeignKey(User, on_delete=models.PROTECT)
  
    order_amount = models.IntegerField()
    shipment = models.IntegerField()
    sec_shipment = models.IntegerField()
    on_order = models.IntegerField()
    
    fill_rate = models.FloatField() #avg service level
    smoothed_acc = models.FloatField()
    dedicated_inventory=models.IntegerField()
    avg_profit=models.FloatField()
    accumulated_profit=models.FloatField()


class GameSupplierData(models.Model):
    game_session = models.ForeignKey(
        GameSession, related_name='uid', on_delete=models.PROTECT
    )
    user = models.ForeignKey(User, on_delete=models.PROTECT)
    allocaton_rule=models.CharField(max_length=1, choices = (('M', 'Manual'), ('P','Proportional'), ('U', 'Uniform'), ('F', 'Forecast Accuracy')))
    prod_strategy = models.CharField(max_length=1, choices=(('H', 'High'), ('M', 'Medium'), ('L'), ('Low')))
    supplier_avg_fill_rate=models.FloatField()

class GameSettings(models.Model):
    # managed by game manager
    game_session = models.ForeignKey(
        GameSession, related_name='uid', on_delete=models.PROTECT)
    exp_smooth_coeff = models.FloatField()
    percent_remaining = models.FloatField()
    percent_reassigned = models.FloatField()
    num_periods = models.IntegerField()
    dedicated_period = models.IntegerField()
    buyer_lead_time = models.IntegerField()
    seed = models.IntegerField()
    supplier_backlog = models.BooleanField()
    overall_supply_health = models.BooleanField()
    reallocate_inventory = models.BooleanField()
    demand_process = models.CharField(max_length=1, choices=(('S','Stationary'),('L','LowHigh'),('D','Diffusion')))


class VisibilityGameSettings(models.Model)
    game_session = models.ForeignKey(
        GameSession, related_name='uid', on_delete=models.PROTECT)
    supplier_buyer_inventory = models.BooleanField()
    supplier_buyer_demand = models.BooleanField()
    ded_inv_buyer1 = models.BooleanField()
    ded_inv_buyer2 = models.BooleanField()
    ded_inv_buyer3 = models.BooleanField()
    ded_inv_buyer4 = models.BooleanField()
    ded_inv_buyer5 = models.BooleanField()


class GameParameterSettings(models.Model):
    game_session = models.ForeignKey(
        GameSession, related_name='uid', on_delete=models.PROTECT)
    lead_time = models.IntegerField()
    s_production_cost = models.FloatField()
    s_holding_cost = models.FloatField()
    s_wholesale_price = models.FloatField()
    s_min_build = models.FloatField()
    s_max_capacity = models.FloatField()

    b_holding_cost_small = models.FloatField()
    b_holding_cost_medium = models.FloatField()
    b_holding_cost_big = models.FloatField()
    b_backlog_cost_small = models.FloatField()
    b_backlog_cost_medium = models.FloatField()
    b_backlog_cost_big = models.FloatField()
    b_retail_pric_small = models.FloatField()
    b_retail_price_medium = models.FloatField()
    b_retail_price_big = models.FloatField()
    b_mean_demand_small = models.FloatField()
    b_mean_demand_medium = models.FloatField()
    b_mean_demand_big = models.FloatField()
    b_sd_demand_small = models.FloatField()
    b_sd_demand_medium = models.FloatField()
    b_sd_demand_big = models.FloatField()

    buyer_size = (('S', 'small'), ('M', 'medium'), ('B', 'big'))

    buyer1_size = models.CharField(max_length=1, choices=buyer_size)
    buyer2_size = models.CharField(max_length=1, choices=buyer_size)
    buyer3_size = models.CharField(max_length=1, choices=buyer_size)
    buyer4_size = models.CharField(max_length=1, choices=buyer_size)
    buyer5_size = models.CharField(max_length=1, choices=buyer_size)

    competing_supplier = models.BooleanField()
    competing_supplier_charge=models.IntField()
