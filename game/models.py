"""Models for the game app."""

from uuid import uuid4
from django.db import models
from django.contrib.auth import get_user_model
from datetime import timedelta
from numpy import mean, std

User = get_user_model() #users 

def deserialize_user(user):
    """Deserialize user instance to JSON."""
    return {
        'id': user.id, 'username': user.username, 'email': user.email,
        'first_name': user.first_name, 'last_name': user.last_name}
        # is admin? 
    #add user.type

class TrackableDateModel(models.Model):
    """Abstract model to Track the creation/updated date for a model."""
    create_date = models.DateTimeField(auto_now_add=True)
    update_date = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True

def _generate_unique_uri():
    """Generates a unique uri for the game session."""
    return str(uuid4()).replace('-', '')[:15]


class GameSession(TrackableDateModel):
    """ A Game. The uri's are generated by taking the first 15 characters from a UUID """
    # owner = models.ForeignKey(User, on_delete=models.PROTECT)  #owner can be supplier?
    uri = models.URLField(default=_generate_unique_uri) #use as game id, and verification code
    num_suppliers = models.IntegerField()
    num_buyers = models.IntegerField()
    date_created = models.DateTimeField(auto_now_add = True)
    game_state = models.CharField(max_length=1) #changes to ended when 
    current_period = models.IntegerField()

    def __str__(self):
        return(self.uri)

    def __unicode__(self):
        return(str(self))

    def getCompletedGame(self, game_status):
        return(self.games.filter(game_status=1).count())

    def getRunningGame(self, game_status):
        return(self.games.filter(game_status=0))

class GameSessionMessage(TrackableDateModel):
    """Store submissions for a session. """

    user = models.ForeignKey(User, on_delete=models.PROTECT)
    game_session = models.ForeignKey(
        GameSession, related_name='uri', on_delete=models.PROTECT
    ) #related_name = ? 
    # message = models.TextField(max_length=2000)
    period = models.ForeignKey(GameSession, related_name="current_period", on_delete=models.PROTECT)
    forecast1=models.IntegerField()
    forecast2=models.IntegerField()
    forecast3=models.IntegerField()
    forecast4=models.IntegerField()
    order=models.IntegerField()
    date_created=models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return(str(self.user)+ 'in period' +str(self.period)+'in game' +str(self.game_session))


    def __unicode__(self):
        return(str(self))

    def to_json(self):
        """deserialize message to JSON."""
        return{'user': deserialize_user(self.user), 'Forecast 1': self.forecast1, 'Forecast 2': self.forecast2, 'Forecast 3': self.forecast3, 'Forecast 4': self.forecast4, 'Order':self.order}

class GameSessionMember(TrackableDateModel):
    """Store all users in a chat session."""
    game_session = models.ForeignKey(
        GameSession, related_name='members', on_delete=models.PROTECT
    )
    user = models.ForeignKey(User, on_delete=models.PROTECT)
    user_type=models.IntegerField() #supplier/buyer


class GameBuyerData(models.Model):
    game_session = models.ForeignKey(
        GameSession, related_name='members', on_delete=models.PROTECT
    )
    user = models.ForeignKey(User, on_delete=models.PROTECT)
    forecast_acc = models.FloatField()
    order_amount = models.IntegerField()
    shipment = models.IntegerField()
    sec_shipment = models.IntegerField()
    on_order = models.IntegerField()
    fill_rate = models.FloatField()
    smoothed_acc = models.FloatField()

class GameSupplierData(models.Model):
    game_session = models.ForeignKey(
        GameSession, related_name='members', on_delete=models.PROTECT
    )
    user = models.ForeignKey(User, on_delete=models.PROTECT)
    forecast_acc = models.FloatField()
    order_amount = models.IntegerField()
    shipment = models.IntegerField()
    sec_shipment = models.IntegerField()
    on_order = models.IntegerField()
    fill_rate = models.FloatField()
    smoothed_acc = models.FloatField()


class GameSettings(models.Model):
    game_session = models.ForeignKey(
        GameSession, related_name='members', on_delete=models.PROTECT
    )
    lead_time = models.IntegerField()
    exp_smooth_coeff = models.FloatField()
    num_periods = models.IntegerField()

